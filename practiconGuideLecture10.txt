note to reader: the final answer in 10.3.5 is basically the complete final script you need for the entirety of 10.3

## Lecture 10.1: intro ##
root-locus quiz
    > 1
    > The point -1 in the figure is part of the root-locus
explanation:
    the left-most pole will bugger off into -inf, the other two will join together and split out towards the zeroes.

more root locus quiz
    > 3
    > The system in the figure can become unstable for K -> inf
    > the system in the figure can develop an undamped oscillation

## Lecture 10.2 Structure ##

A little History quiz
    > Sperry, in 1912, demonstrated in 1914
    > Measuring flight path angle is difficult, complicated and can be unreliable, autopilots are based on measurement of pitch attitude instead and rely on the fact that flight path angle and pitch attitude are related through the aircraft dynamics
explanation:
    just reading the previous page and a quick google search later...

Why complicate things?
    > asymptotic directions: 4
    > The pair will branch-off from the real axis in the directions of +90 and -90 degrees.
explanation:
    There are no zeroes in this function. There are 4 poles, so n - m = 4 asymptotic directions. Splitting always occurs mirrored in conjugate pairs for non-real-axis poles, so they can only split off and +90 & -90 deg.

## Lecture 10.3 Inner: Aircraft autopilot with root-locus, inner loop ##

Trial 1, only feedback of attitude
    > ktheta = -0.438
    >zetasp = 0.351
script:
    clear
    s = tf('s');

    %% Setting up transfer function
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;

    Hthde = Kq*(1+Tth2*s)/(s*(s^2 + 2*zsp*osp*s + osp^2));
    rltool (-Hthde);

    %moving the rightmost pole over to 0.4 requires K = -0.438
    %This corresponds to a zsp of 0.351

Increase short-period damping
    > Kr = -0.095
    > Real = -3.5
    > imaginary = 1.7
script:
    clear
    s = tf('s');

    %% Setting up transfer function
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    % Beware: the transfer function changes. the extra s in the denominator is removed.
    Hthde = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));
    rltool (-Hthde);

    Ktheta = -0.434;
    Hc = feedback(Ktheta*Hthde,1);


Base system with state-space
    > A = [-0.1706 1.885 -1.269 -1.458; -4.445 -1.107 1.226 1.995; 1.885 1.228 -0.9273 -1.431; 2.436 1.033 -2.134 -1.795]
    > B = [ 8.081; 20.15; -15.45; -19.6]
    > C = [-0.6002 -0.5105 0.4512 0.564; -0.2407 0.1923 0.1339 -0.01603; 0.005587 0.09096 0.1336 -0.009228; 0.4175 -0.7806 28.53 -23.1]
    > D = [0; 0; 0; 0]
script:
    clear
    s = tf('s');

    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

State-space system with feedback applied
    > A = [-0.6412 1.484 -0.9151 -1.016; -5.521 -2.023 2.035 2.966; 2.71 1.99 -1.548 -2.206; 3.483 1.923 -2.921 -2.779]
    > B = [8.81; 20.15; -15.45; -19.6]
    > C = [-0.6002 -0.5105 0.4512 0.564; -0.2407 0.1923 0.1339 -0.01603; 0.005587 0.09096 0.1336 -0.009228; 0.4175 -0.7806 28.53 -23.1]
    > D = [0; 0; 0; 0]
    > de SYS2 = -1.5856
    > de SYS1 = -1.8462
script:
    clear
    s = tf('s');

    %% Constants %% 
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    %% Transfer functions
    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

    %% Feedback gain matrix %%
    Kr = -0.089;
    % only output k: 4 outputs 1 input
    K = [Kr 0 0 0];
    sys2 = feedback(sys1,K);

    %% Step input response
    dt = 0.1;
    t = 0:dt:20;
    y1 = step([1 0 0 0]*sys1,t);
    y2 = step([1 0 0 0]*sys2,t);

Tuning the attittude control
    > ktheta = -0.473
    > zeta = 0.618
script:
    clear
    s = tf('s');

    %% Constants %% 
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    %% Transfer functions
    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

    %% Feedback gain matrix %%
    Kr = -0.089;
    % only output k: 4 outputs 1 input
    K = [Kr 0 0 0];
    sys2 = feedback(sys1,K);

    %% Step input response
    dt = 0.1;
    t = 0:dt:20;
    y1 = step([1 0 0 0]*sys1,t);
    y2 = step([1 0 0 0]*sys2,t);

    %% Pole finding -0.4
    Hth = minreal(tf([0 1 0 0]*sys2));
    rltool(-Hth)
    %dragging pole over to -0.4 says 0.473. Since we used -Hth, mult. with -1,
    %so you get -0.473.

Final version of the attitude control
    > A = [-1.644 2.286 -0.3569 -1.082; -7.816 -0.1895 3.312 2.814; 4.469 0.5851 -2.526 -2.089; 5.714 0.1404 -4.163 -2.63]
    > B = [-4.167; -9.532; 7.306; 9.269]
    > C = [-6.002 -0.5105 0.4512 0.564; -0.2407 0.1923 0.1339 -0.01603; 0.005587 0.09096 0.1336 -0.009228; 0.4175 -0.7806 28.53 -23.1]
    > D = [0; 0; 0; 0]
    theta_r = 1
    settling time theta = 5.65
    settling time h(s) = 7.5

script:
    clear
    s = tf('s');

    %% Constants %% 
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    %% Transfer functions
    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

    %% Feedback gain matrix %%
    Kr = -0.089;
    % only output k: 4 outputs 1 input
    K = [Kr 0 0 0];
    sys2 = feedback(sys1,K);

    %% Step input response
    dt = 0.1;
    t = 0:dt:20;
    y1 = step([1 0 0 0]*sys1,t);
    y2 = step([1 0 0 0]*sys2,t);

    %% Pole finding -0.4
    Hth = minreal(tf([0 1 0 0]*sys2));
    rltool(-Hth)
    %dragging pole over to -0.4 says 0.473. Since we used -Hth, mult. with -1,
    %so you get -0.473.
    Kth = -0.473;
    %% Feedback controller
    %unity feedback of only the theta, so 
    K = [0 1 0 0];
    sys3 = feedback(sys2*Kth,K);

    % now we need to look at the second output.
    step(sys3);

## Lecture 10.4 Altitude ##

Verify flight path angle response
    > theta_r = 1
    settling time = 7.7
script:
    %reusing script from previous question, now looking at third graph:
    clear
    s = tf('s');

    %% Constants %% 
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    %% Transfer functions
    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

    %% Feedback gain matrix %%
    Kr = -0.089;
    % only output k: 4 outputs 1 input
    K = [Kr 0 0 0];
    sys2 = feedback(sys1,K);

    %% Step input response
    dt = 0.1;
    t = 0:dt:20;
    y1 = step([1 0 0 0]*sys1,t);
    y2 = step([1 0 0 0]*sys2,t);

    %% Pole finding -0.4
    Hth = minreal(tf([0 1 0 0]*sys2));
    %rltool(-Hth)
    %dragging pole over to -0.4 says 0.473. Since we used -Hth, mult. with -1,
    %so you get -0.473.
    Kth = -0.473;
    %% Feedback controller
    %unity feedback of only the theta, so 
    K = [0 1 0 0];
    sys3 = feedback(sys2*Kth,K);

    % now we need to look at the third output.
    step(sys3,t);

Tune altitude control
    > Kh = 0.00116
    > settling time = 10.8
script:
    clear
    s = tf('s');

    %% Constants %% 
    zsp = 2/sqrt(13);
    osp = sqrt(13);
    Kq = -24;
    Tth2 = 1.4;
    VTAS = 160;

    %% Transfer functions
    Hq = Kq*(1+Tth2*s)/((s^2 + 2*zsp*osp*s + osp^2));

    Hs = [Hq; Hq/s; Hq/(s*(Tth2*s+1)); VTAS*Hq/(s^2*(Tth2*s + 1))];
    sys1 = minreal(ss(Hs));

    %% Feedback gain matrix %%
    Kr = -0.089;
    % only output k: 4 outputs 1 input
    K = [Kr 0 0 0];
    sys2 = feedback(sys1,K);

    %% Step input response
    dt = 0.1;
    t = 0:dt:20;
    y1 = step([1 0 0 0]*sys1,t);
    y2 = step([1 0 0 0]*sys2,t);

    %% Pole finding -0.4
    Hth = minreal(tf([0 1 0 0]*sys2));
    %rltool(-Hth)
    %dragging pole over to -0.4 says 0.473. Since we used -Hth, mult. with -1,
    %so you get -0.473.
    Kth = -0.473;
    %% Feedback controller
    %unity feedback of only the theta, so 
    K = [0 1 0 0];
    sys3 = feedback(sys2*Kth,K);

    % now we need to look at the third output.
    % step(sys3,t);
    %% Tuning the entire system
    Hf = minreal(tf([0 0 0 1]*sys3)); %because were only interested in the last output for this.

    %This returns for Hf
    %Hf =
    % 
    %  1.761e-12 s^3 + 1.503e-12 s^2 - 2.685e-12 s + 1816
    %  --------------------------------------------------
    %   s^4 + 6.99 s^3 + 31.03 s^2 + 11.35 s + 2.077e-16
    %
    % so we remove the tiny terms as per recommendation

    Hfs = 1816/(s^4 + 6.99*s^3+ 31.03*s^2 +11.35*s);
    % this is slightly different from the one given by the webpage, so using
    % that instead
    Hfs2 = 1805/(s^4 + 6.99*s^3+ 30.93*s^2 +11.28*s);
    % the dominant poles are the one closest to the origin (the ones that bend out positively). they verrrrry
    % briefly have damping 0.7 atK = 0.00116
    step(0.00116*sys3,t);